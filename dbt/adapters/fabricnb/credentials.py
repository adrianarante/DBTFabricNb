from dbt.adapters.base import Credentials
from typing import Any, Dict, Optional, Tuple
from dataclasses import dataclass, field
import dbt.exceptions

# Note: this is a custom implementation for Fabric credentials.
# Autogenerated code.
@dataclass
class FabricCredentials(Credentials):
    server: str
    database: str
    schema: str
    authentication: str = "AzureCLI"
    client_id: Optional[str] = None
    client_secret: Optional[str] = None
    tenant_id: Optional[str] = None
    connect_retries: int = 1
    connect_timeout: int = 10

    @classmethod
    def __pre_deserialize__(cls, data: Any) -> Any:
        data = super().__pre_deserialize__(data)
        return data

    def __post_init__(self) -> None:
        if not self.server:
            raise dbt.exceptions.DbtRuntimeError("Must specify `server` in profile")
        if not self.database:
            raise dbt.exceptions.DbtRuntimeError("Must specify `database` in profile")
        if not self.schema:
            raise dbt.exceptions.DbtRuntimeError("Must specify `schema` in profile")

    @property
    def type(self) -> str:
        return "fabric"

    @property
    def unique_field(self) -> str:
        return self.server

    def _connection_keys(self) -> Tuple[str, ...]:
        return "server", "database", "schema"